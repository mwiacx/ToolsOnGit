"---------------------------
"Vundle(Vim插件管理工具)配置
"Copied form github, so nothing to say
"---------------------------
set nocompatible              " be iMproved, required
filetype off                  " required

" set the runtime path to include Vundle and initialize
set rtp+=~/.vim/bundle/Vundle.vim
call vundle#begin()
" alternatively, pass a path where Vundle should install plugins
"call vundle#begin('~/some/path/here')

" let Vundle manage Vundle, required
Plugin 'VundleVim/Vundle.vim'

" The following are examples of different formats supported.
" Keep Plugin commands between vundle#begin/end.
" plugin on GitHub repo
Plugin 'tpope/vim-fugitive'
" plugin from http://vim-scripts.org/vim/scripts.html
Plugin 'L9'
" Git plugin not hosted on GitHub
" Plugin 'git://git.wincent.com/command-t.git'
" git repos on your local machine (i.e. when working on your own plugin)
" Plugin 'file:///home/gmarik/path/to/plugin'
" The sparkup vim script is in a subdirectory of this repo called vim.
" Pass the path to set the runtimepath properly.
" Plugin 'rstacruz/sparkup', {'rtp': 'vim/'}
" Install L9 and avoid a Naming conflict if you've already installed a
" different version somewhere else.
" Plugin 'ascenator/L9', {'name': 'newL9'}
Plugin 'godlygeek/tabular'
Plugin 'plasticboy/vim-markdown'
Plugin 'scrooloose/nerdtree'
Plugin 'vim-scripts/taglist.vim'
Plugin 'ctrlpvim/ctrlp.vim'
Plugin 'jiangmiao/auto-pairs'
Plugin 'wesleyche/srcexpl'
Plugin 'tpope/vim-sleuth'
" 后台递归搜索当前光标所在的token
Plugin 'ramele/agrep'
Plugin 'airblade/vim-gitgutter'
"Plugin 'xuhdev/SingleCompile'
"Plugin 'vim-latex/vim-latex'
"Plugin 'vim-scripts/armasm'
"Plugin 'Rip-Rip/clang_complete'
"Plugin 'davidhalter/jedi-vim'
Plugin 'Valloric/YouCompleteMe'

"Language Highlight
Plugin 'raichoo/haskell-vim'

"Themes
Plugin 'tomasr/molokai'
Plugin 'altercation/vim-colors-solarized'
Plugin 'vim-airline/vim-airline'
Plugin 'vim-airline/vim-airline-themes'
Plugin 'morhetz/gruvbox'
Plugin 'arcticicestudio/nord-vim'
Plugin 'NLKNguyen/papercolor-theme'

" All of your Plugins must be added before the following line
call vundle#end()            " required
filetype plugin indent on    " required
" To ignore plugin indent changes, instead use:
filetype plugin on

"-----------
"vim 基本配置
"-----------
    set t_Co=256
    set number "显示行号
    set laststatus=2
    set shortmess=atl
    set ts=4 "tab宽度为4
    set expandtab "将Tab转换为空格
    set shiftwidth=4 "缩进宽度为4
    set cindent "C语言自动缩进
    set hlsearch "搜索字高亮
    set cursorline "高亮本行
    set cursorcolumn "高亮本列
    let mapleader="," "leader key
    set list lcs=tab:\|\ ,trail:-,extends:>,precedes:<
    set backspace=2

"---------------------
" YCM config
"---------------------
"
let g:ycm_add_preview_to_completeopt = 0
let g:ycm_show_diagnostics_ui = 0
let g:ycm_server_log_level = 'info'
let g:ycm_min_num_identifier_candidate_chars = 2
let g:ycm_collect_identifiers_from_comments_and_strings = 1
let g:ycm_complete_in_strings=1
let g:ycm_key_invoke_completion = '<c-a>'
set completeopt=menu,menuone

let g:ycm_semantic_triggers =  {
			\ 'c,cpp,python,java,go,erlang,perl': ['re!\w{2}'],
			\ 'cs,lua,javascript': ['re!\w{2}'],
			\ }
let g:ycm_filetype_whitelist = {
			\ "c":1,
			\ "cpp":1,
			\ "objc":1,
                        \ "python":1,
			\ "sh":1,
			\ "zsh":1,
			\ "zimbu":1,
			\ }

"---------------------
"clang_complete config
"---------------------
"path to directory where library can be found
"    let g:clang_library_path='/usr/lib/llvm-3.8/lib'
"or path directly to the library file
"    let g:clang_library_path='/usr/lib64/libclang.so.3.8'

"-------------------
"ctags database path
"-------------------
    "请勿使用新版的Ctags，其生成的tags有问题(2016/10/10)
    "推荐Ctags-5.8，自行下载编译
    "set tags=/home/barrelfish4jetsontk1/tags
    "set tags=/home/cx/mCode/barrelfish/tags
    set tags=tags;

"--------------------
"cscope database path
"--------------------
if has("cscope")
    set csprg=/usr/local/bin/cscope
    set csto=0
    set cst
    set nocsverb
    "add any database in current dir
    if filereadable("cscope.out")
        cs add cscope.out
    "else search cscope.out elsewhere
    else
       let cscope_file=findfile("cscope.out", ".;")
       let cscope_pre=matchstr(cscope_file, ".*/")
       if !empty(cscope_file) && filereadable(cscope_file)
           exe "cs add" cscope_file cscope_pre
       endif
    endif
    set csverb
endif

"-------------------
"ctrlp setup
"-------------------
    let g:ctrlp_map='<C-p>'
    let g:ctrpl_cmd='CtrlP'

"-------------------
"key map
"-------------------
    " s: FInd this C symbol
    nmap <leader>fs :cs find s <C-R>=expand('<cword>')<CR><CR>
    " g: FInd the definition
    nmap <leader>fg :cs find g <C-R>=expand('<cword>')<CR><CR>
    " d: Find functions called by this function
    nmap <leader>fd :cs find d <C-R>=expand('<cword>')<CR><CR>
    " c: Find functions calling this function
    nmap <leader>fc :cs find c <C-R>=expand('<cword>')<CR><CR>
    " t: Find this text string
    nmap <leader>ft :cs find t <C-R>=expand('<cword>')<CR><CR>
    " e: Find the egrep pattern
    nmap <leader>fe :cs find e <C-R>=expand('<cword>')<CR><CR>
    " f: Find this file
    nmap <leader>ff :cs find f <C-R>=expand('<cword>')<CR><CR>
    " i: Find files #including this file
    nmap <leader>fi :cs find i <C-R>=expand('<cword>')<CR><CR>
    " ctrl-] : goto def
    nmap <leader>g <C-]>
    nmap <leader>t <C-t>
    " h, j, k, l
    nmap <C-H> <C-W>h
    nmap <C-J> <C-W>j
    nmap <C-K> <C-W>k
    nmap <C-L> <C-W>l
    " update tags and cscope.out
    nnoremap <F6> :!ctags -R . && find `pwd` -name "*.[ch]" -o -name "*.cpp" > cscope.files && cscope -bqk && rm cscope.files<CR>
    " ()....
    " setup auto-pairs
    let g:AutoPairsFlyMode = 0
    let g:AutoPairsShortcutBackInsert = '<M-b>'

"--------------------
"Tap list config
"--------------------
    "filetype on "vim filetype on
    "F7 key = Tag List Toggling
    nmap <F9> :TlistToggle <CR>
    "nmap <F10> : !ctags -R <CR>
    let Tlist_Ctags_Cmd = "/usr/local/bin/ctags"
    let Tlist_Inc_Winwidth = 0
    let Tlist_Show_One_File = 1
    let Tlist_Exit_OnlyWindow = 1
    let Tlist_Auto_Open = 0
    let Tlist_Use_Right_Window = 1

"----------------------
"Source Explorer config
"----------------------
    nmap <F7> :SrcExplToggle <CR>
    let g:SrcExpl_winHeight = 10
    let g:SrcExpl_refreshTime = 100
    let g:SrcExpl_jumpKey = "<ENTER>"
    let g:SrcExpl_gobackKey = "<SPACE>"
    let g:SrcExpl_isUpdateTags = 0
    let g:SrcExpl_pluginList = [
        \ "__Tag_List__",
        \ "_NERD_tree_",
        \ "Source_Explorer"
    \]

    let g:SrcExpl_searchLocalDef = 1
    let g:SrcExpl_updateTagsCmd = "ctags --sort=foldcase -R . && cscope -Rbq"
    let g:SrcExpl_updateTagsKey = "<F12>"
    let g:SrcExpl_prevDefKey='<F10>'
    let g:SrcExpl_nextDefKey='<F11>'

"------------------------
"NERD Tree config
"------------------------
    let NERDTreeWinPos = "left"
    "let g:NERDTreeNodeDelimiter = "\u00a0"
    nmap <F8> :NERDTreeToggle<CR>

"----------
"vim theme
"----------
    syntax enable
    "molokai required!
    set background=dark
    " solarized
    let g:solarized_termtrans = 1
    let g:solarized_termcolors = 256
    " molokai
    let g:molokai_original = 1
    let g:molokai_termtrans = 1
    " gruvbox
    let g:gruvbox_italic = 1
    " papercolor
    let g:PaperColor_Theme_Options = {
        \   'language': {
        \     'python': {
        \       'highlight_builtins' : 1
        \     },
        \     'cpp': {
        \       'highlight_standard_library': 1
        \     },
        \     'c': {
        \       'highlight_builtins' : 1
        \     }
        \   }
        \ }
    " nord
    let g:nord_italic = 1
    let g:nord_underline = 1
    let g:nord_italic_comments = 1
    let g:nord_comment_brightness = 20
    let g:nord_uniform_diff_background = 1
    let g:nord_cursor_line_number_background = 1

    "colorscheme Tomorrow-Night-Eighties
    colorscheme molokai

"--------------------
"airline config
"--------------------
    "open tabline extension
    let g:airline#extensions#tabline#enabled = 1
    let g:airline#extensions#tabline#show_close_button = 0
    let g:airline#extensions#tabline#buffer_nr_show = 1
    let g:airline#extensions#tabline#left_sep = ' '
    let g:airline#extensions#tabline#left_alt_sep = '|'
    let g:airline#extensions#tabline#formatter = 'default'
    " Use Powerline Fonts
    let g:airline_powerline_fonts = 1
    " Setup airline theme
    let g:airline_theme='molokai'

"---------------
"markdown config
"---------------
    let g:vim_markdown_frontmatter=1
    let g:vim_markdown_math=1

"---------------
"python config
"---------------

   let python_highlight_all = 1

"---------------
" Haskell-vim
"---------------
    let g:haskell_enable_quantification = 1   " to enable highlighting of `forall`
    let g:haskell_enable_recursivedo = 1      " to enable highlighting of `mdo` and `rec`
    let g:haskell_enable_arrowsyntax = 1      " to enable highlighting of `proc`
    let g:haskell_enable_pattern_synonyms = 1 " to enable highlighting of `pattern`
    let g:haskell_enable_typeroles = 1        " to enable highlighting of type roles
    let g:haskell_enable_static_pointers = 1  " to enable highlighting of `static`
    let g:haskell_backpack = 1                " to enable highlighting of backpack keywords

"---------------
" vim-gitgutter
"---------------
    nmap <leader>he :GitGutterEnable<CR>
    nmap <leader>hd :GitGutterDisable<CR>
    nmap <leader>hk <Plug>GitGutterNextHunk
    nmap <leader>hj <Plug>GitGutterPrevHunk
    nmap <leader>hs <Plug>GitGutterStageHunk
    nmap <leader>hu <Plug>GitGutterUndoHunk
    nmap <leader>hp <plug>GitGutterPreviewHunk
    nmap <leader>hf :GitGutterFold<CR>

    let g:gitgutter_enabled = 1
    let g:gitgutter_signs = 1
    let g:gitgutter_highlight_lines = 0

"---------------
" agrep
"---------------
    nnoremap <C-m> :Agrep -r "<cword>" ./<CR>

    nnoremap <buffer> <F5> :exec '!python' shellescape(@%, 1)<cr>
