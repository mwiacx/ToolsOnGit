set nocompatible              " be iMproved, required
filetype off                  " required

" set the runtime path to include Vundle and initialize
set rtp+=~/.vim/bundle/Vundle.vim
call vundle#begin()
" alternatively, pass a path where Vundle should install plugins
"call vundle#begin('~/some/path/here')

" let Vundle manage Vundle, required
Plugin 'VundleVim/Vundle.vim'

" The following are examples of different formats supported.
" Keep Plugin commands between vundle#begin/end.
" plugin on GitHub repo
Plugin 'tpope/vim-fugitive'
" plugin from http://vim-scripts.org/vim/scripts.html
Plugin 'L9'
" Git plugin not hosted on GitHub
" Plugin 'git://git.wincent.com/command-t.git'
" git repos on your local machine (i.e. when working on your own plugin)
" Plugin 'file:///home/gmarik/path/to/plugin'
" The sparkup vim script is in a subdirectory of this repo called vim.
" Pass the path to set the runtimepath properly.
" Plugin 'rstacruz/sparkup', {'rtp': 'vim/'}
" Install L9 and avoid a Naming conflict if you've already installed a
" different version somewhere else.
" Plugin 'ascenator/L9', {'name': 'newL9'}
Plugin 'tomasr/molokai'
Plugin 'altercation/vim-colors-solarized'
Plugin 'godlygeek/tabular'
Plugin 'plasticboy/vim-markdown'
Plugin 'scrooloose/nerdtree'
Plugin 'vim-scripts/taglist.vim'
Plugin 'Rip-Rip/clang_complete'
"Plugin 'Valloric/YouCompleteMe'
"Plugin 'wesleyche/srcexpl'
"Plugin 'Shougo/neosnippet-snippets'
"Plugin 'Shougo/neosnippet'
"Plugin 'Shougo/neocomplete'
"Plugin 'xuhdev/SingleCompile'
"Plugin 'vim-latex/vim-latex'
"Plugin 'vim-scripts/armasm'
" All of your Plugins must be added before the following line
call vundle#end()            " required
filetype plugin indent on    " required
" To ignore plugin indent changes, instead use:
filetype plugin on

"-----------
"vim config
"-----------
	set number "line number
	set autoindent "auto indent
	set ts=4 "tab size
	set shiftwidth=4
	set cindent
	let mapleader="," "leader key
	set list lcs=tab:\|\ 

"---------------------
"clang_complete config
"---------------------
" path to directory where library can be found
let g:clang_library_path='/usr/lib/llvm-3.8/lib'
" or path directly to the library file
" let g:clang_library_path='/usr/lib64/libclang.so.3.8'

"-----------
"YCM config
"-----------
"let g:ycm_global_ycm_extra_conf='~/.vim/bundle/YouCompleteMe/third_party/ycmd/cpp/ycm/.ycm_extra_conf.py'
"let g:ycm_enable_diagnostic_signs = 1 
"let g:ycm_enable_diagnostic_highlighting = 1 
"let g:ycm_collect_identifiers_from_tags_files = 1           " 开启 YCM 基于标签引擎
"let g:ycm_collect_identifiers_from_comments_and_strings = 1 " 注释与字符串中的内容也用于补全
"let g:syntastic_ignore_files=[".*\.py$"]
"let g:ycm_seed_identifiers_with_syntax = 1                  " 语法关键字补全
"let g:ycm_complete_in_comments = 1
"let g:ycm_confirm_extra_conf = 0
"let g:ycm_key_list_select_completion = ['<c-n>', '<Down>']  " 映射按键, 没有这个会拦截掉tab, 导致其他插件的tab不能用.
"let g:ycm_key_list_previous_completion = ['<c-p>', '<Up>']
"let g:ycm_complete_in_comments = 1                          " 在注释输入中也能补全
"let g:ycm_complete_in_strings = 1                           " 在字符串输入中也能补全
"let g:ycm_collect_identifiers_from_comments_and_strings = 1 " 注释和字符串中的文字也会被收入补全
"let g:ycm_show_diagnostics_ui = 0                           " 禁用语法检查
"autocmd InsertLeave * if pumvisible() == 0|pclose|endif
"nnoremap <leader>jj :YcmCompleter GoToDefinitionElseDeclaration<CR>
"let g:ycm_min_num_of_chars_for_completion=2                 
"从第2个键入字符就开始罗列匹配项
"-------------------
"ctags database path
"-------------------
	"请勿使用新版的Ctags，其生成的tags有问题(2016/10/10)
	"推荐Ctags-5.8，自行下载编译
	"set tags=/home/barrelfish4jetsontk1/tags
	"set tags=/home/barrelfish/tags

"--------------------
"cscope database path
"--------------------
	set csprg=/usr/bin/cscope "cscope位置
	set csto=0 "cscope DB search fisrt
	set cst "cscope DB tag DB search
	set nocsverb "verbose off

	cs add /home/cx/mCode/barrelfish/cscope.out /home/cx/mCode/barrelfish
	set csverb
	
"-------------------
"key map
"-------------------
	" s: FInd this C symbol
	nnoremap <leader>fs :cs find s <C-R>=expand('<cword>')<CR><CR>
	" g: FInd the definition
	nnoremap <leader>g :cs find g <C-R>=expand('<cword>')<CR><CR>
	" d: Find functions called by this function
	nnoremap <leader>fd :cs find d <C-R>=expand('<cword>')<CR><CR>
	" c: Find functions calling this function
	nnoremap <leader>fc :cs find c <C-R>=expand('<cword>')<CR><CR>
	" t: Find this text string
	nnoremap <leader>ft :cs find t <C-R>=expand('<cword>')<CR><CR>
	" e: Find the egrep pattern
	nnoremap <leader>fe :cs find e <C-R>=expand('<cword>')<CR><CR>
	" f: Find this file
	nnoremap <leader>ff :cs find f <C-R>=expand('<cword>')<CR><CR>
	" i: Find files #including this file
	nnoremap <leader>fi :cs find i <C-R>=expand('<cword>')<CR><CR>
	" ctrl-] : goto def
	"nmap <leader>g <C-]>
	nmap <leader>t <C-t>
	" h, j, k, l
	nmap <C-H> <C-W>h
	nmap <C-J> <C-W>j
	nmap <C-K> <C-W>k
	nmap <C-L> <C-W>l
	" update tags and cscope.out
	nnoremap <F6> :!ctags --sort=foldcase -R . && cscope -Rbq<CR>
	" ()....
	inoremap ' ''<ESC>i
	inoremap " ""<ESC>i
	inoremap ( ()<ESC>i
	inoremap [ []<ESC>i
	inoremap { {<CR>}<ESC>O
	" skip (....)
	func SkipPair()
		if getline('.')[col('.') - 1] == ')' || getline('.')[col('.') - 1] == ']' || getline('.')[col('.') - 1] == '"' || getline('.')[col('.') - 1] == "'" || getline('.')[col('.') - 1] == '}'
			return "\<ESC>la"
		else
			return "\t"
		endif
	endfunc
	" binding
	inoremap <TAB> <C-R>=SkipPair()<CR>


"--------------------
"Tap list config
"--------------------
	"filetype on "vim filetype on
	"F7 key = Tag List Toggling
	nmap <F8> :TlistToggle <CR> 
	"nmap <F10> : !ctags -R <CR>
	let Tlist_Ctags_Cmd = "/usr/local/bin/ctags"
	let Tlist_Inc_Winwidth = 0
	let Tlist_Show_One_File = 1
	let Tlist_Exit_OnlyWindow = 1 
	let Tlist_Auto_Open = 0
	let Tlist_Use_Right_Window = 1

"----------------------
"Source Explorer config
"----------------------
"	nmap <F8> :SrcExplToggle <CR>
"	let g:SrcExpl_winHeight = 8
"	let g:SrcExpl_refreshTime = 100
"	let g:SrcExpl_jumpKey = "<ENTER>"
"	let g:SrcExpl_gobackKey = "<SPACE>"
"	let g:SrcExpl_isUpdateTags = 0
"	let g:SrcExpl_pluginList = [
"		\ "__Tag_List__",
"	    \ "_NERD_tree_",
"	    \ "Source_Explorer"
"	\]
"
"	let g:SrcExpl_searchLocalDef = 1
"	let g:SrcExpl_updateTagsCmd = "ctags --sort=foldcase -R . && cscope -Rbq ."
"	let g:SrcExpl_updateTagsKey = "<F12>"

"------------------------
"NERD Tree config
"------------------------
	let NERDTreeWinPos = "left"
	nmap <F7> :NERDTreeToggle<CR>

"----------
"vim theme
"----------
	syntax on
	"molokai required!
	set t_Co=256
	set background=dark
	"colorscheme solarized
	"let g:solarized_termtrans = 1
	colorscheme molokai
	let g:molokai_original = 1
	let g:molokai_termtrans = 1
	hi Normal ctermfg=252 ctermbg=none
	
"---------------
"markdown config
"---------------
	let g:vim_markdown_frontmatter=1
	let g:vim_markdown_math=1
