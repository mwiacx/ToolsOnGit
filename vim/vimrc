set nocompatible              " be iMproved, required
filetype off                  " required

" set the runtime path to include Vundle and initialize
set rtp+=~/.vim/bundle/Vundle.vim
call vundle#begin()
" alternatively, pass a path where Vundle should install plugins
"call vundle#begin('~/some/path/here')

" let Vundle manage Vundle, required
Plugin 'VundleVim/Vundle.vim'

" The following are examples of different formats supported.
" Keep Plugin commands between vundle#begin/end.
" plugin on GitHub repo
Plugin 'tpope/vim-fugitive'
" plugin from http://vim-scripts.org/vim/scripts.html
Plugin 'L9'
" Git plugin not hosted on GitHub
" Plugin 'git://git.wincent.com/command-t.git'
" git repos on your local machine (i.e. when working on your own plugin)
" Plugin 'file:///home/gmarik/path/to/plugin'
" The sparkup vim script is in a subdirectory of this repo called vim.
" Pass the path to set the runtimepath properly.
" Plugin 'rstacruz/sparkup', {'rtp': 'vim/'}
" Install L9 and avoid a Naming conflict if you've already installed a
" different version somewhere else.
" Plugin 'ascenator/L9', {'name': 'newL9'}
Plugin 'tomasr/molokai'
Plugin 'altercation/vim-colors-solarized'
Plugin 'godlygeek/tabular'
Plugin 'plasticboy/vim-markdown'
Plugin 'scrooloose/nerdtree'
Plugin 'vim-scripts/taglist.vim'
Plugin 'wesleyche/srcexpl'
"Plugin 'Shougo/neosnippet-snippets'
"Plugin 'Shougo/neosnippet'
"Plugin 'Shougo/neocomplete'
"Plugin 'xuhdev/SingleCompile'
"Plugin 'vim-latex/vim-latex'
"Plugin 'vim-scripts/armasm'
" All of your Plugins must be added before the following line
call vundle#end()            " required
filetype plugin indent on    " required
" To ignore plugin indent changes, instead use:
filetype plugin on

"-----------
"vim config
"-----------
	set number "line number
	set autoindent "auto indent
	set ts=4 "tab size
	set shiftwidth=4
	set cindent
	let mapleader="," "leader key
	set list lcs=tab:\|\ 

"-------------------
"ctags database path
"-------------------
	"请勿使用新版的Ctags，其生成的tags有问题(2016/10/10)
	"推荐Ctags-5.8，自行下载编译
	"set tags=/home/barrelfish4jetsontk1/tags
	set tags=/home/barrelfish/tags

"--------------------
"cscope database path
"--------------------
	set csprg=/usr/bin/cscope "cscope位置
	set csto=0 "cscope DB search fisrt
	set cst "cscope DB tag DB search
	set nocsverb "verbose off

	cs add /home/cx/barrelfish/cscope.out
	set csverb
	
"-------------------
"cscope key map
"-------------------
	" s: FInd this C symbol
	nnoremap <leader>fs :cs find s <C-R>=expand('<cword>')<CR><CR>
	" g: FInd the definition
	nnoremap <leader>fg :cs find g <C-R>=expand('<cword>')<CR><CR>
	" d: Find functions called by this function
	nnoremap <leader>fd :cs find d <C-R>=expand('<cword>')<CR><CR>
	" c: Find functions calling this function
	nnoremap <leader>fc :cs find c <C-R>=expand('<cword>')<CR><CR>
	" t: Find this text string
	nnoremap <leader>ft :cs find t <C-R>=expand('<cword>')<CR><CR>
	" e: Find the egrep pattern
	nnoremap <leader>fe :cs find e <C-R>=expand('<cword>')<CR><CR>
	" f: Find this file
	nnoremap <leader>ff :cs find f <C-R>=expand('<cword>')<CR><CR>
	" i: Find files #including this file
	nnoremap <leader>fi :cs find i <C-R>=expand('<cword>')<CR><CR>

"--------------------
"Tap list config
"--------------------
	"filetype on "vim filetype on
	"F7 key = Tag List Toggling
	nmap <F9> :TlistToggle <CR> 
	"nmap <F10> : !ctags -R <CR>
	let Tlist_Ctags_Cmd = "/usr/local/bin/ctags"
	let Tlist_Inc_Winwidth = 0
	let Tlist_Show_One_File = 1
	let Tlist_Exit_OnlyWindow = 1 
	let Tlist_Auto_Open = 0
	let Tlist_Use_Right_Window = 1

"----------------------
"Source Explorer config
"----------------------
	nmap <F8> :SrcExplToggle <CR>
	nmap <C-H> <C-W>h
	nmap <C-J> <C-W>j
	nmap <C-K> <C-W>k
	nmap <C-L> <C-W>l

	let g:SrcExpl_winHeight = 8
	let g:SrcExpl_refreshTime = 100
	let g:SrcExpl_jumpKey = "<ENTER>"
	let g:SrcExpl_gobackKey = "<SPACE>"
	let g:SrcExpl_isUpdateTags = 0
	let g:SrcExpl_pluginList = [
		\ "__Tag_List__",
	    \ "_NERD_tree_",
	    \ "Source_Explorer"
	\]

	let g:SrcExpl_searchLocalDef = 1
	let g:SrcExpl_updateTagsCmd = "ctags --sort=foldcase -R ."
	let g:SrcExpl_updateTagsKey = "<F12>"

"------------------------
"NERD Tree config
"------------------------
	let NERDTreeWinPos = "left"
	nmap <F7> :NERDTreeToggle<CR>

"----------
"vim theme
"----------
	syntax on
	"molokai required!
	set t_Co=256
	set background=dark
	colorscheme solarized
	"colorscheme molokai
	"let g:molokai_original = 1
"---------------
"markdown config
"---------------
	let g:vim_markdown_frontmatter=1
	let g:vim_markdown_math=1

"----------------
"vim-Latex config
"----------------
"	set sw=2
"	set iskeyword+=:
"	set shellslash "for win32
"	set grepprg=grep\ -nH\ $*
"	nmap <F10> :call Tex_ViewLatex()<CR>
"	let g:tex_flavor='latex'
"	let g:Tex_compileRule_pdf = 'xelatex -synctex=1 -file-line-erro-style -interation=nonstopmode $*'
"	let g:Tex_DefaultTragetFormat = 'pdf'
"	let g:Tex_SmartKeyBS = 0
"	let g:Tex_ViewRule_dvi = 'dviout'

"	call SingleCompile#SetCompilerTemplate('tex', 'xelatex', 'XeLatex',
"	                \ 'xelatex', '-interaction=nonstopmode -synctex=1 -file-line-error-style',
"	                \ SingleCompile#GetDefaultOpenCommand() .
"	                \ ' "$(FILE_TITLE)$.pdf"')
"	" call SingleCompile#SetOutfile('filetype', 'compiler', 'out_file')
"	call SingleCompile#ChooseCompiler('tex', 'xelatex')
"	set list lcs=tab:\|\

"-----------------
"neosnippet config
"-----------------
"	" Plugin key-mappings
"	imap <C-k> <Plug>(neosnippet_expand_or_jump)
"	smap <C-k> <Plug>(neosnippet_expand_or_jump)
"	xmap <C-k> <Plug>(neosnippet_expand_target)
"	" superTab like snippets behavior
"	imap <C-k> <Plug>(neosnippet_expand_or_jump)
"	smap <expr><TAB> neosinppet#expandable_or_jumpable() ?
"				\ "\<Plug>(neosnippet_expand_or_jump)" : "\<TAB>"
"	if has('conceal')
"		set conceallevel=2 concealcursor=niv
"	endif

"	" Enable sinpMate compatibility feature
"	let g:neosnippet#enable_sinpmate_compatibility = 1
"	
"	let g:neosnippet#snippets_directory='~/.vim/bundle/vim-snippet/snippets'



"	"Note: This option must be set in .vimrc(_vimrc).  NOT IN
"	".gvimrc(_gvimrc)!
"	" Disable AutoComplPop.
"	let g:acp_enableAtStartup = 0
"	" Use neocomplete.
"	let g:neocomplete#enable_at_startup = 1
"	" Use smartcase.
"	let g:neocomplete#enable_smart_case = 1
"	" Set minimum syntax keyword length.
"	let g:neocomplete#sources#syntax#min_keyword_length = 3
"	"
"	" Define dictionary.
"	let g:neocomplete#sources#dictionary#dictionaries = {
"	    \ 'default' : '',
"	    \ 'vimshell' : $HOME.'/.vimshell_hist',
"	    \ 'scheme' : $HOME.'/.gosh_completions'
"	    \ }
"
"	" Define keyword.
"	if !exists('g:neocomplete#keyword_patterns')
"	    let g:neocomplete#keyword_patterns = {}
"	endif
"	let g:neocomplete#keyword_patterns['default'] = '\h\w*'
"
"	" Plugin key-mappings.
"	inoremap <expr><C-g> neocomplete#undo_completion()
"	inoremap <expr><C-l> neocomplete#complete_common_string()
"
"	" Recommended key-mappings.
"	" <CR>: close popup and save indent.
"	inoremap <silent> <CR> <C-r>=<SID>my_cr_function()<CR>
"	function! s:my_cr_function()
"		return (pumvisible() ? "\<C-y>" : "" ) . "\<CR>"
"	" For no inserting <CR> key.
"	" return pumvisible() ? "\<C-y>" : "\<CR>"
"	endfunction
"	" <TAB>: completion.
"	inoremap <expr><TAB>  pumvisible() ? "\<C-n>" : "\<TAB>"
"	" <C-h>, <BS>: close popup and delete backword char.
"	inoremap <expr><C-h> neocomplete#smart_close_popup()."\<C-h>"
"	inoremap <expr><BS> neocomplete#smart_close_popup()."\<C-h>"
"	" Close popup by <Space>.
"	"inoremap <expr><Space> pumvisible() ? "\<C-y>" : "\<Space>"
"
"	" AutoComplPop like behavior.
"	"let g:neocomplete#enable_auto_select = 1
"
"	" Shell like behavior(not recommended).
"	"set completeopt+=longest
"	"let g:neocomplete#enable_auto_select = 1
"	"let g:neocomplete#disable_auto_complete = 1
"	"inoremap <expr><TAB>  pumvisible() ? "\<Down>" : "\<C-x>\<C-u>"
"
"	" Enable omni completion.
"	autocmd FileType css setlocal omnifunc=csscomplete#CompleteCSS
"	autocmd FileType html,markdown setlocal omnifunc=htmlcomplete#CompleteTags
"	autocmd FileType javascript setlocal omnifunc=javascriptcomplete#CompleteJS
"	autocmd FileType python setlocal omnifunc=pythoncomplete#Complete
"	autocmd FileType xml setlocal omnifunc=xmlcomplete#CompleteTags
"
"	" Enable heavy omni completion.
"	if !exists('g:neocomplete#sources#omni#input_patterns')
"		let g:neocomplete#sources#omni#input_patterns = {}
"	endif
"	"let g:neocomplete#sources#omni#input_patterns.php = '[^.\t]->\h\w*\|\h\w*::'
"	"let g:neocomplete#sources#omni#input_patterns.c = '[^.[:digit:]*\t]\%(\.\|->\)'
"	"let g:neocomplete#sources#omni#input_patterns.cpp = '[^.[:digit:]*\t]\%(\.\|->\)\|\h\w*::'
"
"	" For perlomni.vim setting.
"	" https://github.com/c9s/perlomni.vim
"	let g:neocomplete#sources#omni#input_patterns.perl = '\h\w*->\h\w*\|\h\w*::'
"
"
""----------------------
""SingleCompile
""----------------------
"	let g:SingleCompile_showquickfixiferror = 1
"	nmap <F6> :SCCompile<cr>
"	imap <F6> :SCCompile<cr>
